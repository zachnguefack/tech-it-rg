@page "/weather"
@using Microsoft.EntityFrameworkCore
@inject IServiceProvider ServiceProvider

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data from a database.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (!forecasts.Any())
{
    <p><em>No weather data available.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>System Name</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Fahrenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.SystemName</td>
                    <td>@forecast.Temp_C</td>
                    <td>@forecast.Temp_F</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherData>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Configuration de la base de données
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseSqlServer("Server=tcp:techitrgserver.database.windows.net,1433;Initial Catalog=TechITdb;Persist Security Info=False;User ID=zacharie;Password=!AristZacki54321;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;")
                .Options;

            using var dbContext = new AppDbContext(options);

            // Charger les données depuis la table Weather
            forecasts = await dbContext.Weather.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            Console.WriteLine(ex.StackTrace);

            // Optionnel : afficher une erreur dans l'interface utilisateur
            forecasts = new List<WeatherData>
            {
                new WeatherData
                {
                    SystemName = "Error",
                    Temp_C = 0,
                    Temp_F = 0,
                    Summary = ex.Message
                }
            };
        }
    }

    // Classe pour le DbContext
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        public DbSet<WeatherData> Weather { get; set; }
    }

    // Classe pour le modèle WeatherData
    public class WeatherData
    {
        public int Id { get; set; } // Clé primaire
        public string SystemName { get; set; }
        public int Temp_C { get; set; }
        public int Temp_F { get; set; }
        public string Summary { get; set; }
    }

}
